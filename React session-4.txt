npx create-react-app project_name

cd project_name

code .
------------------------------------------------------
Creating A First React Application
-----------------------------------------------------
index.js
----------------
import React from "react";
import ReactDOM from "react-dom";

let e1=React.createElement("h1",null,"Welcome To React JS Application")
ReactDOM.render(e1,document.getElementById("root"));
-----------------------------------
index.html
----------------

<div id="root"</div>
=====================================================
procedure 2: by using JSX also
---------------------------------------
App.js
-----------
import React, { Component } from "react";

class App extends Component{
    render()
    {
        return React.createElement("h1",null,"Hello React")
    }
}
export default App;

=======================================
index.js
------------------
import React from "react"
import ReactDOM from "react-dom";
import App from "./App"

ReactDOM.render(<App />,document.getElementById("root"));


===========================================
index.html
========
<div id="root"></div>
===========================================
render() Method
---------------------

The render() method is the only required method in a class component. It examines this.props and this.state . 
It returns one of the following types:
React elements – These are created via JSX. 
For example, <div /> and <App  /> are React elements that instruct React to render a DOM node, or another user-defined component, respectively.
Arrays and fragments -  It is used to return multiple elements from render.
Portals – It is used to render children into a different DOM subtree.
String and numbers - These are rendered as text nodes in the DOM.
Booleans or null -  It renders nothing. (Mostly exists to support return test && <Child /> pattern, where test is boolean.)

Note - The render() function should be pure, meaning that it does not modify 
component state, it returns the same result each time it’s invoked, 
and it does not directly interact with the browser.

--------------------------------------------------------
React Element
--------------------

You can create a react element using React.createElement() method 
but there is a easy way to create element via JSX. 

Using createElement() Method
React.createElement(“h1”, null, “Hello SathyaTech”);

Using JSX
<h1> Hello SathyaTech </h1>
=================================================
React.createElement(type, props, children)
==================================
React.createElement(type, props, children) - It creates a React Element with the given arguments.
Syntax:- React.createElement(type, props, children)
type: Type of the html element or component. (example : h1,h2,p,button..etc ).
props: The properties object.
	Example: {style :{ color:“blue”}} or className or event handlers etc.
children: anything you need to pass between the dom elements.
Ex:- 
React.createElement(‘h1’, null, ‘Hello SathyaTech’);

===============================================





